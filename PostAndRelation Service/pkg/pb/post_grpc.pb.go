// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc2
// source: pkg/pb/post.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostNrelService_AddNewPost_FullMethodName                      = "/postnrel_proto.PostNrelService/AddNewPost"
	PostNrelService_GetAllPostByUser_FullMethodName                = "/postnrel_proto.PostNrelService/GetAllPostByUser"
	PostNrelService_DeletePost_FullMethodName                      = "/postnrel_proto.PostNrelService/DeletePost"
	PostNrelService_EditPost_FullMethodName                        = "/postnrel_proto.PostNrelService/EditPost"
	PostNrelService_Follow_FullMethodName                          = "/postnrel_proto.PostNrelService/Follow"
	PostNrelService_UnFollow_FullMethodName                        = "/postnrel_proto.PostNrelService/UnFollow"
	PostNrelService_LikePost_FullMethodName                        = "/postnrel_proto.PostNrelService/LikePost"
	PostNrelService_UnLikePost_FullMethodName                      = "/postnrel_proto.PostNrelService/UnLikePost"
	PostNrelService_AddComment_FullMethodName                      = "/postnrel_proto.PostNrelService/AddComment"
	PostNrelService_DeleteComment_FullMethodName                   = "/postnrel_proto.PostNrelService/DeleteComment"
	PostNrelService_EditComment_FullMethodName                     = "/postnrel_proto.PostNrelService/EditComment"
	PostNrelService_FetchPostComments_FullMethodName               = "/postnrel_proto.PostNrelService/FetchPostComments"
	PostNrelService_GetMostLovedPostsFromGlobalUser_FullMethodName = "/postnrel_proto.PostNrelService/GetMostLovedPostsFromGlobalUser"
	PostNrelService_GetAllRelatedPostsForHomeScreen_FullMethodName = "/postnrel_proto.PostNrelService/GetAllRelatedPostsForHomeScreen"
	PostNrelService_GetRandomPosts_FullMethodName                  = "/postnrel_proto.PostNrelService/GetRandomPosts"
	PostNrelService_GetCountsForUserProfile_FullMethodName         = "/postnrel_proto.PostNrelService/GetCountsForUserProfile"
	PostNrelService_GetFollowersIds_FullMethodName                 = "/postnrel_proto.PostNrelService/GetFollowersIds"
	PostNrelService_GetFollowingsIds_FullMethodName                = "/postnrel_proto.PostNrelService/GetFollowingsIds"
	PostNrelService_UserAFollowingUserBorNot_FullMethodName        = "/postnrel_proto.PostNrelService/UserAFollowingUserBorNot"
)

// PostNrelServiceClient is the client API for PostNrelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostNrelServiceClient interface {
	AddNewPost(ctx context.Context, in *RequestAddPost, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error)
	GetAllPostByUser(ctx context.Context, in *RequestGetAllPosts, opts ...grpc.CallOption) (*ResponseUserPosts, error)
	DeletePost(ctx context.Context, in *RequestDeletePost, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error)
	EditPost(ctx context.Context, in *RequestEditPost, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error)
	Follow(ctx context.Context, in *RequestFollowUnFollow, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error)
	UnFollow(ctx context.Context, in *RequestFollowUnFollow, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error)
	LikePost(ctx context.Context, in *RequestLikeUnlikePost, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error)
	UnLikePost(ctx context.Context, in *RequestLikeUnlikePost, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error)
	AddComment(ctx context.Context, in *RequestAddComment, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error)
	DeleteComment(ctx context.Context, in *RequestCommentDelete, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error)
	EditComment(ctx context.Context, in *RequestEditComment, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error)
	FetchPostComments(ctx context.Context, in *RequestFetchComments, opts ...grpc.CallOption) (*ResponseFetchComments, error)
	GetMostLovedPostsFromGlobalUser(ctx context.Context, in *RequestGetAllPosts, opts ...grpc.CallOption) (*ResponseUserPosts, error)
	GetAllRelatedPostsForHomeScreen(ctx context.Context, in *RequestGetAllPosts, opts ...grpc.CallOption) (*ResponseUserPosts, error)
	GetRandomPosts(ctx context.Context, in *RequestGetRandomPosts, opts ...grpc.CallOption) (*ResponseUserPosts, error)
	// From Auth Service
	GetCountsForUserProfile(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResponseGetCounts, error)
	GetFollowersIds(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResposneGetUsersIds, error)
	GetFollowingsIds(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResposneGetUsersIds, error)
	UserAFollowingUserBorNot(ctx context.Context, in *RequestFollowUnFollow, opts ...grpc.CallOption) (*ResponseUserABrelation, error)
}

type postNrelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostNrelServiceClient(cc grpc.ClientConnInterface) PostNrelServiceClient {
	return &postNrelServiceClient{cc}
}

func (c *postNrelServiceClient) AddNewPost(ctx context.Context, in *RequestAddPost, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseErrorMessageOnly)
	err := c.cc.Invoke(ctx, PostNrelService_AddNewPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) GetAllPostByUser(ctx context.Context, in *RequestGetAllPosts, opts ...grpc.CallOption) (*ResponseUserPosts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseUserPosts)
	err := c.cc.Invoke(ctx, PostNrelService_GetAllPostByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) DeletePost(ctx context.Context, in *RequestDeletePost, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseErrorMessageOnly)
	err := c.cc.Invoke(ctx, PostNrelService_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) EditPost(ctx context.Context, in *RequestEditPost, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseErrorMessageOnly)
	err := c.cc.Invoke(ctx, PostNrelService_EditPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) Follow(ctx context.Context, in *RequestFollowUnFollow, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseErrorMessageOnly)
	err := c.cc.Invoke(ctx, PostNrelService_Follow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) UnFollow(ctx context.Context, in *RequestFollowUnFollow, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseErrorMessageOnly)
	err := c.cc.Invoke(ctx, PostNrelService_UnFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) LikePost(ctx context.Context, in *RequestLikeUnlikePost, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseErrorMessageOnly)
	err := c.cc.Invoke(ctx, PostNrelService_LikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) UnLikePost(ctx context.Context, in *RequestLikeUnlikePost, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseErrorMessageOnly)
	err := c.cc.Invoke(ctx, PostNrelService_UnLikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) AddComment(ctx context.Context, in *RequestAddComment, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseErrorMessageOnly)
	err := c.cc.Invoke(ctx, PostNrelService_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) DeleteComment(ctx context.Context, in *RequestCommentDelete, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseErrorMessageOnly)
	err := c.cc.Invoke(ctx, PostNrelService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) EditComment(ctx context.Context, in *RequestEditComment, opts ...grpc.CallOption) (*ResponseErrorMessageOnly, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseErrorMessageOnly)
	err := c.cc.Invoke(ctx, PostNrelService_EditComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) FetchPostComments(ctx context.Context, in *RequestFetchComments, opts ...grpc.CallOption) (*ResponseFetchComments, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseFetchComments)
	err := c.cc.Invoke(ctx, PostNrelService_FetchPostComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) GetMostLovedPostsFromGlobalUser(ctx context.Context, in *RequestGetAllPosts, opts ...grpc.CallOption) (*ResponseUserPosts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseUserPosts)
	err := c.cc.Invoke(ctx, PostNrelService_GetMostLovedPostsFromGlobalUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) GetAllRelatedPostsForHomeScreen(ctx context.Context, in *RequestGetAllPosts, opts ...grpc.CallOption) (*ResponseUserPosts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseUserPosts)
	err := c.cc.Invoke(ctx, PostNrelService_GetAllRelatedPostsForHomeScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) GetRandomPosts(ctx context.Context, in *RequestGetRandomPosts, opts ...grpc.CallOption) (*ResponseUserPosts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseUserPosts)
	err := c.cc.Invoke(ctx, PostNrelService_GetRandomPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) GetCountsForUserProfile(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResponseGetCounts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseGetCounts)
	err := c.cc.Invoke(ctx, PostNrelService_GetCountsForUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) GetFollowersIds(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResposneGetUsersIds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResposneGetUsersIds)
	err := c.cc.Invoke(ctx, PostNrelService_GetFollowersIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) GetFollowingsIds(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResposneGetUsersIds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResposneGetUsersIds)
	err := c.cc.Invoke(ctx, PostNrelService_GetFollowingsIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) UserAFollowingUserBorNot(ctx context.Context, in *RequestFollowUnFollow, opts ...grpc.CallOption) (*ResponseUserABrelation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseUserABrelation)
	err := c.cc.Invoke(ctx, PostNrelService_UserAFollowingUserBorNot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostNrelServiceServer is the server API for PostNrelService service.
// All implementations must embed UnimplementedPostNrelServiceServer
// for forward compatibility.
type PostNrelServiceServer interface {
	AddNewPost(context.Context, *RequestAddPost) (*ResponseErrorMessageOnly, error)
	GetAllPostByUser(context.Context, *RequestGetAllPosts) (*ResponseUserPosts, error)
	DeletePost(context.Context, *RequestDeletePost) (*ResponseErrorMessageOnly, error)
	EditPost(context.Context, *RequestEditPost) (*ResponseErrorMessageOnly, error)
	Follow(context.Context, *RequestFollowUnFollow) (*ResponseErrorMessageOnly, error)
	UnFollow(context.Context, *RequestFollowUnFollow) (*ResponseErrorMessageOnly, error)
	LikePost(context.Context, *RequestLikeUnlikePost) (*ResponseErrorMessageOnly, error)
	UnLikePost(context.Context, *RequestLikeUnlikePost) (*ResponseErrorMessageOnly, error)
	AddComment(context.Context, *RequestAddComment) (*ResponseErrorMessageOnly, error)
	DeleteComment(context.Context, *RequestCommentDelete) (*ResponseErrorMessageOnly, error)
	EditComment(context.Context, *RequestEditComment) (*ResponseErrorMessageOnly, error)
	FetchPostComments(context.Context, *RequestFetchComments) (*ResponseFetchComments, error)
	GetMostLovedPostsFromGlobalUser(context.Context, *RequestGetAllPosts) (*ResponseUserPosts, error)
	GetAllRelatedPostsForHomeScreen(context.Context, *RequestGetAllPosts) (*ResponseUserPosts, error)
	GetRandomPosts(context.Context, *RequestGetRandomPosts) (*ResponseUserPosts, error)
	// From Auth Service
	GetCountsForUserProfile(context.Context, *RequestUserIdPnR) (*ResponseGetCounts, error)
	GetFollowersIds(context.Context, *RequestUserIdPnR) (*ResposneGetUsersIds, error)
	GetFollowingsIds(context.Context, *RequestUserIdPnR) (*ResposneGetUsersIds, error)
	UserAFollowingUserBorNot(context.Context, *RequestFollowUnFollow) (*ResponseUserABrelation, error)
	mustEmbedUnimplementedPostNrelServiceServer()
}

// UnimplementedPostNrelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostNrelServiceServer struct{}

func (UnimplementedPostNrelServiceServer) AddNewPost(context.Context, *RequestAddPost) (*ResponseErrorMessageOnly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewPost not implemented")
}
func (UnimplementedPostNrelServiceServer) GetAllPostByUser(context.Context, *RequestGetAllPosts) (*ResponseUserPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPostByUser not implemented")
}
func (UnimplementedPostNrelServiceServer) DeletePost(context.Context, *RequestDeletePost) (*ResponseErrorMessageOnly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostNrelServiceServer) EditPost(context.Context, *RequestEditPost) (*ResponseErrorMessageOnly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPost not implemented")
}
func (UnimplementedPostNrelServiceServer) Follow(context.Context, *RequestFollowUnFollow) (*ResponseErrorMessageOnly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedPostNrelServiceServer) UnFollow(context.Context, *RequestFollowUnFollow) (*ResponseErrorMessageOnly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}
func (UnimplementedPostNrelServiceServer) LikePost(context.Context, *RequestLikeUnlikePost) (*ResponseErrorMessageOnly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedPostNrelServiceServer) UnLikePost(context.Context, *RequestLikeUnlikePost) (*ResponseErrorMessageOnly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikePost not implemented")
}
func (UnimplementedPostNrelServiceServer) AddComment(context.Context, *RequestAddComment) (*ResponseErrorMessageOnly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedPostNrelServiceServer) DeleteComment(context.Context, *RequestCommentDelete) (*ResponseErrorMessageOnly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedPostNrelServiceServer) EditComment(context.Context, *RequestEditComment) (*ResponseErrorMessageOnly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditComment not implemented")
}
func (UnimplementedPostNrelServiceServer) FetchPostComments(context.Context, *RequestFetchComments) (*ResponseFetchComments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPostComments not implemented")
}
func (UnimplementedPostNrelServiceServer) GetMostLovedPostsFromGlobalUser(context.Context, *RequestGetAllPosts) (*ResponseUserPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostLovedPostsFromGlobalUser not implemented")
}
func (UnimplementedPostNrelServiceServer) GetAllRelatedPostsForHomeScreen(context.Context, *RequestGetAllPosts) (*ResponseUserPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRelatedPostsForHomeScreen not implemented")
}
func (UnimplementedPostNrelServiceServer) GetRandomPosts(context.Context, *RequestGetRandomPosts) (*ResponseUserPosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomPosts not implemented")
}
func (UnimplementedPostNrelServiceServer) GetCountsForUserProfile(context.Context, *RequestUserIdPnR) (*ResponseGetCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountsForUserProfile not implemented")
}
func (UnimplementedPostNrelServiceServer) GetFollowersIds(context.Context, *RequestUserIdPnR) (*ResposneGetUsersIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowersIds not implemented")
}
func (UnimplementedPostNrelServiceServer) GetFollowingsIds(context.Context, *RequestUserIdPnR) (*ResposneGetUsersIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingsIds not implemented")
}
func (UnimplementedPostNrelServiceServer) UserAFollowingUserBorNot(context.Context, *RequestFollowUnFollow) (*ResponseUserABrelation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAFollowingUserBorNot not implemented")
}
func (UnimplementedPostNrelServiceServer) mustEmbedUnimplementedPostNrelServiceServer() {}
func (UnimplementedPostNrelServiceServer) testEmbeddedByValue()                         {}

// UnsafePostNrelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostNrelServiceServer will
// result in compilation errors.
type UnsafePostNrelServiceServer interface {
	mustEmbedUnimplementedPostNrelServiceServer()
}

func RegisterPostNrelServiceServer(s grpc.ServiceRegistrar, srv PostNrelServiceServer) {
	// If the following call pancis, it indicates UnimplementedPostNrelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostNrelService_ServiceDesc, srv)
}

func _PostNrelService_AddNewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).AddNewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_AddNewPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).AddNewPost(ctx, req.(*RequestAddPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_GetAllPostByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetAllPosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).GetAllPostByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_GetAllPostByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).GetAllPostByUser(ctx, req.(*RequestGetAllPosts))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeletePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).DeletePost(ctx, req.(*RequestDeletePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_EditPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).EditPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_EditPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).EditPost(ctx, req.(*RequestEditPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFollowUnFollow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).Follow(ctx, req.(*RequestFollowUnFollow))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFollowUnFollow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_UnFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).UnFollow(ctx, req.(*RequestFollowUnFollow))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLikeUnlikePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_LikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).LikePost(ctx, req.(*RequestLikeUnlikePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_UnLikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLikeUnlikePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).UnLikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_UnLikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).UnLikePost(ctx, req.(*RequestLikeUnlikePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).AddComment(ctx, req.(*RequestAddComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCommentDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).DeleteComment(ctx, req.(*RequestCommentDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_EditComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).EditComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_EditComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).EditComment(ctx, req.(*RequestEditComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_FetchPostComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFetchComments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).FetchPostComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_FetchPostComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).FetchPostComments(ctx, req.(*RequestFetchComments))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_GetMostLovedPostsFromGlobalUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetAllPosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).GetMostLovedPostsFromGlobalUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_GetMostLovedPostsFromGlobalUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).GetMostLovedPostsFromGlobalUser(ctx, req.(*RequestGetAllPosts))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_GetAllRelatedPostsForHomeScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetAllPosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).GetAllRelatedPostsForHomeScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_GetAllRelatedPostsForHomeScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).GetAllRelatedPostsForHomeScreen(ctx, req.(*RequestGetAllPosts))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_GetRandomPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetRandomPosts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).GetRandomPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_GetRandomPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).GetRandomPosts(ctx, req.(*RequestGetRandomPosts))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_GetCountsForUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserIdPnR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).GetCountsForUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_GetCountsForUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).GetCountsForUserProfile(ctx, req.(*RequestUserIdPnR))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_GetFollowersIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserIdPnR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).GetFollowersIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_GetFollowersIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).GetFollowersIds(ctx, req.(*RequestUserIdPnR))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_GetFollowingsIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserIdPnR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).GetFollowingsIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_GetFollowingsIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).GetFollowingsIds(ctx, req.(*RequestUserIdPnR))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_UserAFollowingUserBorNot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFollowUnFollow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).UserAFollowingUserBorNot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_UserAFollowingUserBorNot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).UserAFollowingUserBorNot(ctx, req.(*RequestFollowUnFollow))
	}
	return interceptor(ctx, in, info, handler)
}

// PostNrelService_ServiceDesc is the grpc.ServiceDesc for PostNrelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostNrelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postnrel_proto.PostNrelService",
	HandlerType: (*PostNrelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewPost",
			Handler:    _PostNrelService_AddNewPost_Handler,
		},
		{
			MethodName: "GetAllPostByUser",
			Handler:    _PostNrelService_GetAllPostByUser_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostNrelService_DeletePost_Handler,
		},
		{
			MethodName: "EditPost",
			Handler:    _PostNrelService_EditPost_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _PostNrelService_Follow_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _PostNrelService_UnFollow_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _PostNrelService_LikePost_Handler,
		},
		{
			MethodName: "UnLikePost",
			Handler:    _PostNrelService_UnLikePost_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _PostNrelService_AddComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _PostNrelService_DeleteComment_Handler,
		},
		{
			MethodName: "EditComment",
			Handler:    _PostNrelService_EditComment_Handler,
		},
		{
			MethodName: "FetchPostComments",
			Handler:    _PostNrelService_FetchPostComments_Handler,
		},
		{
			MethodName: "GetMostLovedPostsFromGlobalUser",
			Handler:    _PostNrelService_GetMostLovedPostsFromGlobalUser_Handler,
		},
		{
			MethodName: "GetAllRelatedPostsForHomeScreen",
			Handler:    _PostNrelService_GetAllRelatedPostsForHomeScreen_Handler,
		},
		{
			MethodName: "GetRandomPosts",
			Handler:    _PostNrelService_GetRandomPosts_Handler,
		},
		{
			MethodName: "GetCountsForUserProfile",
			Handler:    _PostNrelService_GetCountsForUserProfile_Handler,
		},
		{
			MethodName: "GetFollowersIds",
			Handler:    _PostNrelService_GetFollowersIds_Handler,
		},
		{
			MethodName: "GetFollowingsIds",
			Handler:    _PostNrelService_GetFollowingsIds_Handler,
		},
		{
			MethodName: "UserAFollowingUserBorNot",
			Handler:    _PostNrelService_UserAFollowingUserBorNot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/post.proto",
}
