// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc2
// source: pkg/pb/post.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostNrelService_GetCountsForUserProfile_FullMethodName  = "/postnrel_proto.PostNrelService/GetCountsForUserProfile"
	PostNrelService_GetFollowersIds_FullMethodName          = "/postnrel_proto.PostNrelService/GetFollowersIds"
	PostNrelService_GetFollowingsIds_FullMethodName         = "/postnrel_proto.PostNrelService/GetFollowingsIds"
	PostNrelService_UserAFollowingUserBorNot_FullMethodName = "/postnrel_proto.PostNrelService/UserAFollowingUserBorNot"
)

// PostNrelServiceClient is the client API for PostNrelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostNrelServiceClient interface {
	GetCountsForUserProfile(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResponseGetCounts, error)
	GetFollowersIds(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResposneGetUsersIds, error)
	GetFollowingsIds(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResposneGetUsersIds, error)
	UserAFollowingUserBorNot(ctx context.Context, in *RequestFollowUnFollow, opts ...grpc.CallOption) (*ResponseUserABrelation, error)
}

type postNrelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostNrelServiceClient(cc grpc.ClientConnInterface) PostNrelServiceClient {
	return &postNrelServiceClient{cc}
}

func (c *postNrelServiceClient) GetCountsForUserProfile(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResponseGetCounts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseGetCounts)
	err := c.cc.Invoke(ctx, PostNrelService_GetCountsForUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) GetFollowersIds(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResposneGetUsersIds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResposneGetUsersIds)
	err := c.cc.Invoke(ctx, PostNrelService_GetFollowersIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) GetFollowingsIds(ctx context.Context, in *RequestUserIdPnR, opts ...grpc.CallOption) (*ResposneGetUsersIds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResposneGetUsersIds)
	err := c.cc.Invoke(ctx, PostNrelService_GetFollowingsIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postNrelServiceClient) UserAFollowingUserBorNot(ctx context.Context, in *RequestFollowUnFollow, opts ...grpc.CallOption) (*ResponseUserABrelation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseUserABrelation)
	err := c.cc.Invoke(ctx, PostNrelService_UserAFollowingUserBorNot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostNrelServiceServer is the server API for PostNrelService service.
// All implementations must embed UnimplementedPostNrelServiceServer
// for forward compatibility.
type PostNrelServiceServer interface {
	GetCountsForUserProfile(context.Context, *RequestUserIdPnR) (*ResponseGetCounts, error)
	GetFollowersIds(context.Context, *RequestUserIdPnR) (*ResposneGetUsersIds, error)
	GetFollowingsIds(context.Context, *RequestUserIdPnR) (*ResposneGetUsersIds, error)
	UserAFollowingUserBorNot(context.Context, *RequestFollowUnFollow) (*ResponseUserABrelation, error)
	mustEmbedUnimplementedPostNrelServiceServer()
}

// UnimplementedPostNrelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostNrelServiceServer struct{}

func (UnimplementedPostNrelServiceServer) GetCountsForUserProfile(context.Context, *RequestUserIdPnR) (*ResponseGetCounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountsForUserProfile not implemented")
}
func (UnimplementedPostNrelServiceServer) GetFollowersIds(context.Context, *RequestUserIdPnR) (*ResposneGetUsersIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowersIds not implemented")
}
func (UnimplementedPostNrelServiceServer) GetFollowingsIds(context.Context, *RequestUserIdPnR) (*ResposneGetUsersIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingsIds not implemented")
}
func (UnimplementedPostNrelServiceServer) UserAFollowingUserBorNot(context.Context, *RequestFollowUnFollow) (*ResponseUserABrelation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAFollowingUserBorNot not implemented")
}
func (UnimplementedPostNrelServiceServer) mustEmbedUnimplementedPostNrelServiceServer() {}
func (UnimplementedPostNrelServiceServer) testEmbeddedByValue()                         {}

// UnsafePostNrelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostNrelServiceServer will
// result in compilation errors.
type UnsafePostNrelServiceServer interface {
	mustEmbedUnimplementedPostNrelServiceServer()
}

func RegisterPostNrelServiceServer(s grpc.ServiceRegistrar, srv PostNrelServiceServer) {
	// If the following call pancis, it indicates UnimplementedPostNrelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostNrelService_ServiceDesc, srv)
}

func _PostNrelService_GetCountsForUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserIdPnR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).GetCountsForUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_GetCountsForUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).GetCountsForUserProfile(ctx, req.(*RequestUserIdPnR))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_GetFollowersIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserIdPnR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).GetFollowersIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_GetFollowersIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).GetFollowersIds(ctx, req.(*RequestUserIdPnR))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_GetFollowingsIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserIdPnR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).GetFollowingsIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_GetFollowingsIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).GetFollowingsIds(ctx, req.(*RequestUserIdPnR))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostNrelService_UserAFollowingUserBorNot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFollowUnFollow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostNrelServiceServer).UserAFollowingUserBorNot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostNrelService_UserAFollowingUserBorNot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostNrelServiceServer).UserAFollowingUserBorNot(ctx, req.(*RequestFollowUnFollow))
	}
	return interceptor(ctx, in, info, handler)
}

// PostNrelService_ServiceDesc is the grpc.ServiceDesc for PostNrelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostNrelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postnrel_proto.PostNrelService",
	HandlerType: (*PostNrelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCountsForUserProfile",
			Handler:    _PostNrelService_GetCountsForUserProfile_Handler,
		},
		{
			MethodName: "GetFollowersIds",
			Handler:    _PostNrelService_GetFollowersIds_Handler,
		},
		{
			MethodName: "GetFollowingsIds",
			Handler:    _PostNrelService_GetFollowingsIds_Handler,
		},
		{
			MethodName: "UserAFollowingUserBorNot",
			Handler:    _PostNrelService_UserAFollowingUserBorNot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/post.proto",
}
