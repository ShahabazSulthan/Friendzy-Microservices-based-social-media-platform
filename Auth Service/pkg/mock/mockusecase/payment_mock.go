// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interfaces/payment.go

// Package mockUsecase is a generated GoMock package.
package mockUsecase

import (
	reflect "reflect"

	responsemodels "github.com/ShahabazSulthan/Friendzy_Auth/pkg/models/responsemodels"
	gomock "github.com/golang/mock/gomock"
)

// MockIPaymentUsecase is a mock of IPaymentUsecase interface.
type MockIPaymentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentUsecaseMockRecorder
}

// MockIPaymentUsecaseMockRecorder is the mock recorder for MockIPaymentUsecase.
type MockIPaymentUsecaseMockRecorder struct {
	mock *MockIPaymentUsecase
}

// NewMockIPaymentUsecase creates a new mock instance.
func NewMockIPaymentUsecase(ctrl *gomock.Controller) *MockIPaymentUsecase {
	mock := &MockIPaymentUsecase{ctrl: ctrl}
	mock.recorder = &MockIPaymentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentUsecase) EXPECT() *MockIPaymentUsecaseMockRecorder {
	return m.recorder
}

// CreateBlueTickPayment mocks base method.
func (m *MockIPaymentUsecase) CreateBlueTickPayment(userID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlueTickPayment", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlueTickPayment indicates an expected call of CreateBlueTickPayment.
func (mr *MockIPaymentUsecaseMockRecorder) CreateBlueTickPayment(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlueTickPayment", reflect.TypeOf((*MockIPaymentUsecase)(nil).CreateBlueTickPayment), userID)
}

// GetAllVerifiedUsers mocks base method.
func (m *MockIPaymentUsecase) GetAllVerifiedUsers(limit, offset string) (*[]responsemodels.BlueTickResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVerifiedUsers", limit, offset)
	ret0, _ := ret[0].(*[]responsemodels.BlueTickResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVerifiedUsers indicates an expected call of GetAllVerifiedUsers.
func (mr *MockIPaymentUsecaseMockRecorder) GetAllVerifiedUsers(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVerifiedUsers", reflect.TypeOf((*MockIPaymentUsecase)(nil).GetAllVerifiedUsers), limit, offset)
}

// IsUserVerified mocks base method.
func (m *MockIPaymentUsecase) IsUserVerified(userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserVerified", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserVerified indicates an expected call of IsUserVerified.
func (mr *MockIPaymentUsecaseMockRecorder) IsUserVerified(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserVerified", reflect.TypeOf((*MockIPaymentUsecase)(nil).IsUserVerified), userID)
}

// OnlinePayment mocks base method.
func (m *MockIPaymentUsecase) OnlinePayment(userID, verificationID string) (*responsemodels.OnlinePayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnlinePayment", userID, verificationID)
	ret0, _ := ret[0].(*responsemodels.OnlinePayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnlinePayment indicates an expected call of OnlinePayment.
func (mr *MockIPaymentUsecaseMockRecorder) OnlinePayment(userID, verificationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlinePayment", reflect.TypeOf((*MockIPaymentUsecase)(nil).OnlinePayment), userID, verificationID)
}

// VerifyBlueTickPayment mocks base method.
func (m *MockIPaymentUsecase) VerifyBlueTickPayment(orderID, paymentID, signature string, userID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyBlueTickPayment", orderID, paymentID, signature, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyBlueTickPayment indicates an expected call of VerifyBlueTickPayment.
func (mr *MockIPaymentUsecaseMockRecorder) VerifyBlueTickPayment(orderID, paymentID, signature, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyBlueTickPayment", reflect.TypeOf((*MockIPaymentUsecase)(nil).VerifyBlueTickPayment), orderID, paymentID, signature, userID)
}
