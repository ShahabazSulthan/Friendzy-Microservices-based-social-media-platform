// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interfaces/auth_usecase.go

// Package mockUsecase is a generated GoMock package.
package mockUsecase

import (
	reflect "reflect"

	requestmodels "github.com/ShahabazSulthan/Friendzy_Auth/pkg/models/requestmodels"
	responsemodels "github.com/ShahabazSulthan/Friendzy_Auth/pkg/models/responsemodels"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserUseCase is a mock of IUserUseCase interface.
type MockIUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUseCaseMockRecorder
}

// MockIUserUseCaseMockRecorder is the mock recorder for MockIUserUseCase.
type MockIUserUseCaseMockRecorder struct {
	mock *MockIUserUseCase
}

// NewMockIUserUseCase creates a new mock instance.
func NewMockIUserUseCase(ctrl *gomock.Controller) *MockIUserUseCase {
	mock := &MockIUserUseCase{ctrl: ctrl}
	mock.recorder = &MockIUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUseCase) EXPECT() *MockIUserUseCaseMockRecorder {
	return m.recorder
}

// CheckUserExist mocks base method.
func (m *MockIUserUseCase) CheckUserExist(userId *string) (bool, *error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExist", userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*error)
	return ret0, ret1
}

// CheckUserExist indicates an expected call of CheckUserExist.
func (mr *MockIUserUseCaseMockRecorder) CheckUserExist(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExist", reflect.TypeOf((*MockIUserUseCase)(nil).CheckUserExist), userId)
}

// EditUserDetails mocks base method.
func (m *MockIUserUseCase) EditUserDetails(editInput *requestmodels.EditUserProfileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUserDetails", editInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditUserDetails indicates an expected call of EditUserDetails.
func (mr *MockIUserUseCaseMockRecorder) EditUserDetails(editInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUserDetails", reflect.TypeOf((*MockIUserUseCase)(nil).EditUserDetails), editInput)
}

// ForgetPasswordRequest mocks base method.
func (m *MockIUserUseCase) ForgetPasswordRequest(email *string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgetPasswordRequest", email)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForgetPasswordRequest indicates an expected call of ForgetPasswordRequest.
func (mr *MockIUserUseCaseMockRecorder) ForgetPasswordRequest(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgetPasswordRequest", reflect.TypeOf((*MockIUserUseCase)(nil).ForgetPasswordRequest), email)
}

// GetEmailAndUsername mocks base method.
func (m *MockIUserUseCase) GetEmailAndUsername(userID int) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailAndUsername", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEmailAndUsername indicates an expected call of GetEmailAndUsername.
func (mr *MockIUserUseCaseMockRecorder) GetEmailAndUsername(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailAndUsername", reflect.TypeOf((*MockIUserUseCase)(nil).GetEmailAndUsername), userID)
}

// GetFollowersDetails mocks base method.
func (m *MockIUserUseCase) GetFollowersDetails(userId *string) (*[]responsemodels.UserListResponse, *error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowersDetails", userId)
	ret0, _ := ret[0].(*[]responsemodels.UserListResponse)
	ret1, _ := ret[1].(*error)
	return ret0, ret1
}

// GetFollowersDetails indicates an expected call of GetFollowersDetails.
func (mr *MockIUserUseCaseMockRecorder) GetFollowersDetails(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowersDetails", reflect.TypeOf((*MockIUserUseCase)(nil).GetFollowersDetails), userId)
}

// GetFollowingDetails mocks base method.
func (m *MockIUserUseCase) GetFollowingDetails(userId *string) (*[]responsemodels.UserListResponse, *error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowingDetails", userId)
	ret0, _ := ret[0].(*[]responsemodels.UserListResponse)
	ret1, _ := ret[1].(*error)
	return ret0, ret1
}

// GetFollowingDetails indicates an expected call of GetFollowingDetails.
func (mr *MockIUserUseCaseMockRecorder) GetFollowingDetails(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowingDetails", reflect.TypeOf((*MockIUserUseCase)(nil).GetFollowingDetails), userId)
}

// GetUserDetailsLiteForPostView mocks base method.
func (m *MockIUserUseCase) GetUserDetailsLiteForPostView(userId *string) (*responsemodels.UserLiteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetailsLiteForPostView", userId)
	ret0, _ := ret[0].(*responsemodels.UserLiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetailsLiteForPostView indicates an expected call of GetUserDetailsLiteForPostView.
func (mr *MockIUserUseCaseMockRecorder) GetUserDetailsLiteForPostView(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetailsLiteForPostView", reflect.TypeOf((*MockIUserUseCase)(nil).GetUserDetailsLiteForPostView), userId)
}

// ResetPassword mocks base method.
func (m *MockIUserUseCase) ResetPassword(userData *requestmodels.ForgotPasswordRequest, TempVerification *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", userData, TempVerification)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockIUserUseCaseMockRecorder) ResetPassword(userData, TempVerification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockIUserUseCase)(nil).ResetPassword), userData, TempVerification)
}

// SearchUser mocks base method.
func (m *MockIUserUseCase) SearchUser(myId, SearchText, limit, offset *string) (*[]responsemodels.UserListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUser", myId, SearchText, limit, offset)
	ret0, _ := ret[0].(*[]responsemodels.UserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUser indicates an expected call of SearchUser.
func (mr *MockIUserUseCaseMockRecorder) SearchUser(myId, SearchText, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUser", reflect.TypeOf((*MockIUserUseCase)(nil).SearchUser), myId, SearchText, limit, offset)
}

// SetUserProfileImage mocks base method.
func (m *MockIUserUseCase) SetUserProfileImage(userId, ContenType *string, Img *[]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserProfileImage", userId, ContenType, Img)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserProfileImage indicates an expected call of SetUserProfileImage.
func (mr *MockIUserUseCaseMockRecorder) SetUserProfileImage(userId, ContenType, Img interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserProfileImage", reflect.TypeOf((*MockIUserUseCase)(nil).SetUserProfileImage), userId, ContenType, Img)
}

// UserLogin mocks base method.
func (m *MockIUserUseCase) UserLogin(loginData *requestmodels.UserLoginRequest) (responsemodels.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", loginData)
	ret0, _ := ret[0].(responsemodels.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockIUserUseCaseMockRecorder) UserLogin(loginData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockIUserUseCase)(nil).UserLogin), loginData)
}

// UserProfile mocks base method.
func (m *MockIUserUseCase) UserProfile(userId, UserBId *string) (*responsemodels.UserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProfile", userId, UserBId)
	ret0, _ := ret[0].(*responsemodels.UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserProfile indicates an expected call of UserProfile.
func (mr *MockIUserUseCaseMockRecorder) UserProfile(userId, UserBId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProfile", reflect.TypeOf((*MockIUserUseCase)(nil).UserProfile), userId, UserBId)
}

// UserSignUp mocks base method.
func (m *MockIUserUseCase) UserSignUp(userData *requestmodels.UserSignUpRequest) (responsemodels.SignUpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", userData)
	ret0, _ := ret[0].(responsemodels.SignUpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockIUserUseCaseMockRecorder) UserSignUp(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockIUserUseCase)(nil).UserSignUp), userData)
}

// VerifyOtp mocks base method.
func (m *MockIUserUseCase) VerifyOtp(otp string, TempVerificationToken *string) (responsemodels.OTPVerificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOtp", otp, TempVerificationToken)
	ret0, _ := ret[0].(responsemodels.OTPVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyOtp indicates an expected call of VerifyOtp.
func (mr *MockIUserUseCaseMockRecorder) VerifyOtp(otp, TempVerificationToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOtp", reflect.TypeOf((*MockIUserUseCase)(nil).VerifyOtp), otp, TempVerificationToken)
}
