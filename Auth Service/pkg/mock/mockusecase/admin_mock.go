// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interfaces/adminUsecase.go

// Package mockUsecase is a generated GoMock package.
package mockUsecase

import (
	reflect "reflect"

	requestmodels "github.com/ShahabazSulthan/Friendzy_Auth/pkg/models/requestmodels"
	responsemodels "github.com/ShahabazSulthan/Friendzy_Auth/pkg/models/responsemodels"
	gomock "github.com/golang/mock/gomock"
)

// MockIAdminUsecase is a mock of IAdminUsecase interface.
type MockIAdminUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIAdminUsecaseMockRecorder
}

// MockIAdminUsecaseMockRecorder is the mock recorder for MockIAdminUsecase.
type MockIAdminUsecaseMockRecorder struct {
	mock *MockIAdminUsecase
}

// NewMockIAdminUsecase creates a new mock instance.
func NewMockIAdminUsecase(ctrl *gomock.Controller) *MockIAdminUsecase {
	mock := &MockIAdminUsecase{ctrl: ctrl}
	mock.recorder = &MockIAdminUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdminUsecase) EXPECT() *MockIAdminUsecaseMockRecorder {
	return m.recorder
}

// AdminLogin mocks base method.
func (m *MockIAdminUsecase) AdminLogin(arg0 *requestmodels.AdminLoginData) (*responsemodels.AdminLoginres, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminLogin", arg0)
	ret0, _ := ret[0].(*responsemodels.AdminLoginres)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminLogin indicates an expected call of AdminLogin.
func (mr *MockIAdminUsecaseMockRecorder) AdminLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminLogin", reflect.TypeOf((*MockIAdminUsecase)(nil).AdminLogin), arg0)
}

// BlcokUser mocks base method.
func (m *MockIAdminUsecase) BlcokUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlcokUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlcokUser indicates an expected call of BlcokUser.
func (mr *MockIAdminUsecaseMockRecorder) BlcokUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlcokUser", reflect.TypeOf((*MockIAdminUsecase)(nil).BlcokUser), arg0)
}

// GetAllUsers mocks base method.
func (m *MockIAdminUsecase) GetAllUsers(arg0, arg1 string) (*[]responsemodels.UserAdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].(*[]responsemodels.UserAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockIAdminUsecaseMockRecorder) GetAllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockIAdminUsecase)(nil).GetAllUsers), arg0, arg1)
}

// UnblockUser mocks base method.
func (m *MockIAdminUsecase) UnblockUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockIAdminUsecaseMockRecorder) UnblockUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockIAdminUsecase)(nil).UnblockUser), arg0)
}
