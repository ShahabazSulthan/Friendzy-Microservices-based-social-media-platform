// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/auth.go

// Package mockRepository is a generated GoMock package.
package mockRepository

import (
	reflect "reflect"
	time "time"

	requestmodels "github.com/ShahabazSulthan/Friendzy_Auth/pkg/models/requestmodels"
	responsemodels "github.com/ShahabazSulthan/Friendzy_Auth/pkg/models/responsemodels"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// ActivateUser mocks base method.
func (m *MockIUserRepository) ActivateUser(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateUser", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateUser indicates an expected call of ActivateUser.
func (mr *MockIUserRepositoryMockRecorder) ActivateUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateUser", reflect.TypeOf((*MockIUserRepository)(nil).ActivateUser), email)
}

// CreateUser mocks base method.
func (m *MockIUserRepository) CreateUser(userData *requestmodels.UserSignUpRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepositoryMockRecorder) CreateUser(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateUser), userData)
}

// DeleteRecentOtpRequests mocks base method.
func (m *MockIUserRepository) DeleteRecentOtpRequests() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecentOtpRequests")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecentOtpRequests indicates an expected call of DeleteRecentOtpRequests.
func (mr *MockIUserRepositoryMockRecorder) DeleteRecentOtpRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecentOtpRequests", reflect.TypeOf((*MockIUserRepository)(nil).DeleteRecentOtpRequests))
}

// GetEmailAndUsernameByUserID mocks base method.
func (m *MockIUserRepository) GetEmailAndUsernameByUserID(userID int) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailAndUsernameByUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEmailAndUsernameByUserID indicates an expected call of GetEmailAndUsernameByUserID.
func (mr *MockIUserRepositoryMockRecorder) GetEmailAndUsernameByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailAndUsernameByUserID", reflect.TypeOf((*MockIUserRepository)(nil).GetEmailAndUsernameByUserID), userID)
}

// GetFollowersDetails mocks base method.
func (m *MockIUserRepository) GetFollowersDetails(userIDs *[]uint64) (*[]responsemodels.UserListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowersDetails", userIDs)
	ret0, _ := ret[0].(*[]responsemodels.UserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowersDetails indicates an expected call of GetFollowersDetails.
func (mr *MockIUserRepositoryMockRecorder) GetFollowersDetails(userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowersDetails", reflect.TypeOf((*MockIUserRepository)(nil).GetFollowersDetails), userIDs)
}

// GetFollowingDetails mocks base method.
func (m *MockIUserRepository) GetFollowingDetails(userIDs *[]uint64) (*[]responsemodels.UserListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowingDetails", userIDs)
	ret0, _ := ret[0].(*[]responsemodels.UserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowingDetails indicates an expected call of GetFollowingDetails.
func (mr *MockIUserRepositoryMockRecorder) GetFollowingDetails(userIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowingDetails", reflect.TypeOf((*MockIUserRepository)(nil).GetFollowingDetails), userIDs)
}

// GetOtpInfo mocks base method.
func (m *MockIUserRepository) GetOtpInfo(email string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtpInfo", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOtpInfo indicates an expected call of GetOtpInfo.
func (mr *MockIUserRepositoryMockRecorder) GetOtpInfo(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtpInfo", reflect.TypeOf((*MockIUserRepository)(nil).GetOtpInfo), email)
}

// GetUserIDByEmail mocks base method.
func (m *MockIUserRepository) GetUserIDByEmail(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByEmail", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByEmail indicates an expected call of GetUserIDByEmail.
func (mr *MockIUserRepositoryMockRecorder) GetUserIDByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByEmail", reflect.TypeOf((*MockIUserRepository)(nil).GetUserIDByEmail), email)
}

// GetUserLiteProfile mocks base method.
func (m *MockIUserRepository) GetUserLiteProfile(userID *string) (*responsemodels.UserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLiteProfile", userID)
	ret0, _ := ret[0].(*responsemodels.UserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLiteProfile indicates an expected call of GetUserLiteProfile.
func (mr *MockIUserRepositoryMockRecorder) GetUserLiteProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLiteProfile", reflect.TypeOf((*MockIUserRepository)(nil).GetUserLiteProfile), userID)
}

// GetUserPasswordHashAndStatus mocks base method.
func (m *MockIUserRepository) GetUserPasswordHashAndStatus(email string) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordHashAndStatus", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetUserPasswordHashAndStatus indicates an expected call of GetUserPasswordHashAndStatus.
func (mr *MockIUserRepositoryMockRecorder) GetUserPasswordHashAndStatus(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordHashAndStatus", reflect.TypeOf((*MockIUserRepository)(nil).GetUserPasswordHashAndStatus), email)
}

// GetUserProfileUrlAndUsername mocks base method.
func (m *MockIUserRepository) GetUserProfileUrlAndUsername(userID *string) (*responsemodels.UserLiteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfileUrlAndUsername", userID)
	ret0, _ := ret[0].(*responsemodels.UserLiteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfileUrlAndUsername indicates an expected call of GetUserProfileUrlAndUsername.
func (mr *MockIUserRepositoryMockRecorder) GetUserProfileUrlAndUsername(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfileUrlAndUsername", reflect.TypeOf((*MockIUserRepository)(nil).GetUserProfileUrlAndUsername), userID)
}

// GetUserStateForAccessTokenGeneration mocks base method.
func (m *MockIUserRepository) GetUserStateForAccessTokenGeneration(userID *string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStateForAccessTokenGeneration", userID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStateForAccessTokenGeneration indicates an expected call of GetUserStateForAccessTokenGeneration.
func (mr *MockIUserRepositoryMockRecorder) GetUserStateForAccessTokenGeneration(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStateForAccessTokenGeneration", reflect.TypeOf((*MockIUserRepository)(nil).GetUserStateForAccessTokenGeneration), userID)
}

// IsUserBlocked mocks base method.
func (m *MockIUserRepository) IsUserBlocked(userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserBlocked", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserBlocked indicates an expected call of IsUserBlocked.
func (mr *MockIUserRepositoryMockRecorder) IsUserBlocked(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserBlocked", reflect.TypeOf((*MockIUserRepository)(nil).IsUserBlocked), userID)
}

// SaveUserOtp mocks base method.
func (m *MockIUserRepository) SaveUserOtp(otp int, userEmail string, expiry time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserOtp", otp, userEmail, expiry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserOtp indicates an expected call of SaveUserOtp.
func (mr *MockIUserRepositoryMockRecorder) SaveUserOtp(otp, userEmail, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserOtp", reflect.TypeOf((*MockIUserRepository)(nil).SaveUserOtp), otp, userEmail, expiry)
}

// SearchUsersByName mocks base method.
func (m *MockIUserRepository) SearchUsersByName(myID, searchText, limit, offset *string) (*[]responsemodels.UserListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsersByName", myID, searchText, limit, offset)
	ret0, _ := ret[0].(*[]responsemodels.UserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsersByName indicates an expected call of SearchUsersByName.
func (mr *MockIUserRepositoryMockRecorder) SearchUsersByName(myID, searchText, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsersByName", reflect.TypeOf((*MockIUserRepository)(nil).SearchUsersByName), myID, searchText, limit, offset)
}

// SetUserProfileImage mocks base method.
func (m *MockIUserRepository) SetUserProfileImage(userID, imageUrl *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserProfileImage", userID, imageUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserProfileImage indicates an expected call of SetUserProfileImage.
func (mr *MockIUserRepositoryMockRecorder) SetUserProfileImage(userID, imageUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserProfileImage", reflect.TypeOf((*MockIUserRepository)(nil).SetUserProfileImage), userID, imageUrl)
}

// UpdateUserLiteProfile mocks base method.
func (m *MockIUserRepository) UpdateUserLiteProfile(editInput *requestmodels.EditUserProfileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLiteProfile", editInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLiteProfile indicates an expected call of UpdateUserLiteProfile.
func (mr *MockIUserRepositoryMockRecorder) UpdateUserLiteProfile(editInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLiteProfile", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUserLiteProfile), editInput)
}

// UpdateUserPassword mocks base method.
func (m *MockIUserRepository) UpdateUserPassword(email, hashedPassword *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", email, hashedPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockIUserRepositoryMockRecorder) UpdateUserPassword(email, hashedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUserPassword), email, hashedPassword)
}

// UserExistsByEmail mocks base method.
func (m *MockIUserRepository) UserExistsByEmail(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExistsByEmail", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserExistsByEmail indicates an expected call of UserExistsByEmail.
func (mr *MockIUserRepositoryMockRecorder) UserExistsByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExistsByEmail", reflect.TypeOf((*MockIUserRepository)(nil).UserExistsByEmail), email)
}

// UserExistsByID mocks base method.
func (m *MockIUserRepository) UserExistsByID(userID string) (bool, *error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExistsByID", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*error)
	return ret0, ret1
}

// UserExistsByID indicates an expected call of UserExistsByID.
func (mr *MockIUserRepositoryMockRecorder) UserExistsByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExistsByID", reflect.TypeOf((*MockIUserRepository)(nil).UserExistsByID), userID)
}

// UserExistsByUsername mocks base method.
func (m *MockIUserRepository) UserExistsByUsername(username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExistsByUsername", username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UserExistsByUsername indicates an expected call of UserExistsByUsername.
func (mr *MockIUserRepositoryMockRecorder) UserExistsByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExistsByUsername", reflect.TypeOf((*MockIUserRepository)(nil).UserExistsByUsername), username)
}
