// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/adminauth.go

// Package mockRepository is a generated GoMock package.
package mockRepository

import (
	reflect "reflect"

	responsemodels "github.com/ShahabazSulthan/Friendzy_Auth/pkg/models/responsemodels"
	gomock "github.com/golang/mock/gomock"
)

// MockIAdminRepo is a mock of IAdminRepo interface.
type MockIAdminRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAdminRepoMockRecorder
}

// MockIAdminRepoMockRecorder is the mock recorder for MockIAdminRepo.
type MockIAdminRepoMockRecorder struct {
	mock *MockIAdminRepo
}

// NewMockIAdminRepo creates a new mock instance.
func NewMockIAdminRepo(ctrl *gomock.Controller) *MockIAdminRepo {
	mock := &MockIAdminRepo{ctrl: ctrl}
	mock.recorder = &MockIAdminRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdminRepo) EXPECT() *MockIAdminRepoMockRecorder {
	return m.recorder
}

// AllUsers mocks base method.
func (m *MockIAdminRepo) AllUsers(limit, offset int) (*[]responsemodels.UserAdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUsers", limit, offset)
	ret0, _ := ret[0].(*[]responsemodels.UserAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllUsers indicates an expected call of AllUsers.
func (mr *MockIAdminRepoMockRecorder) AllUsers(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsers", reflect.TypeOf((*MockIAdminRepo)(nil).AllUsers), limit, offset)
}

// BlockUser mocks base method.
func (m *MockIAdminRepo) BlockUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockIAdminRepoMockRecorder) BlockUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockIAdminRepo)(nil).BlockUser), arg0)
}

// GetPassword mocks base method.
func (m *MockIAdminRepo) GetPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockIAdminRepoMockRecorder) GetPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockIAdminRepo)(nil).GetPassword), arg0)
}

// UnblockUser mocks base method.
func (m *MockIAdminRepo) UnblockUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockIAdminRepoMockRecorder) UnblockUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockIAdminRepo)(nil).UnblockUser), arg0)
}
